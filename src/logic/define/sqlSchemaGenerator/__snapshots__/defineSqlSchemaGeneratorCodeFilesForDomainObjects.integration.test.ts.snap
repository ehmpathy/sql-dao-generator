// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`defineSqlSchemaGeneratorCodeFilesForDomainObjects should work on the example project 1`] = `
Array [
  GeneratedCodeFile {
    "content": "import { carriage } from './carriage';
import { certificate } from './certificate';
import { geocode } from './geocode';
import { locomotive } from './locomotive';
import { train } from './train';
import { trainEngineer } from './trainEngineer';
import { trainLocatedEvent } from './trainLocatedEvent';
import { trainStation } from './trainStation';

/**
 * all of the domain objects which we want to create sql-schema-resources for with sql-schema-generator
 */
export const generateSqlSchemasFor = [
  carriage,
  certificate,
  trainEngineer,
  geocode,
  train,
  locomotive,
  trainLocatedEvent,
  trainStation,
];",
    "relpath": "index.ts",
  },
  GeneratedCodeFile {
    "content": "import { Entity, prop } from 'sql-schema-generator';

/**
 * sql-schema for the domain entity 'Carriage'
 */
export const carriage = new Entity({
  name: 'carriage',
  properties: {
    cin: prop.VARCHAR(),
    carries: prop.ENUM(['PASSENGER', 'FREIGHT']),
    capacity: prop.NUMERIC(),
  },
  unique: ['uuid'],
});",
    "relpath": "carriage.ts",
  },
  GeneratedCodeFile {
    "content": "import { prop, ValueObject } from 'sql-schema-generator';

/**
 * sql-schema for the domain value object 'Certificate'
 */
export const certificate = new ValueObject({
  name: 'certificate',
  properties: {
    type: prop.ENUM(['LOCOMOTIVE_DRIVING', 'ENGINE_MAINTENANCE', 'CARRIAGE_MAINTENANCE']),
    cid: prop.VARCHAR(),
  },
});",
    "relpath": "certificate.ts",
  },
  GeneratedCodeFile {
    "content": "import { Entity, prop } from 'sql-schema-generator';

import { certificate } from './certificate';

/**
 * sql-schema for the domain entity 'TrainEngineer'
 */
export const trainEngineer = new Entity({
  name: 'train_engineer',
  properties: {
    social_security_number_hash: prop.VARCHAR(),
    certificate_ids: { ...prop.ARRAY_OF(prop.REFERENCES(certificate)), updatable: true },
    name: { ...prop.VARCHAR(), updatable: true },
  },
  unique: ['social_security_number_hash'],
});",
    "relpath": "trainEngineer.ts",
  },
  GeneratedCodeFile {
    "content": "import { prop, ValueObject } from 'sql-schema-generator';

/**
 * sql-schema for the domain value object 'Geocode'
 */
export const geocode = new ValueObject({
  name: 'geocode',
  properties: {
    latitude: prop.NUMERIC(),
    longitude: prop.NUMERIC(),
  },
});",
    "relpath": "geocode.ts",
  },
  GeneratedCodeFile {
    "content": "import { Entity, prop } from 'sql-schema-generator';

import { carriage } from './carriage';
import { geocode } from './geocode';
import { locomotive } from './locomotive';
import { trainEngineer } from './trainEngineer';

/**
 * sql-schema for the domain entity 'Train'
 */
export const train = new Entity({
  name: 'train',
  properties: {
    home_station_geocode_id: prop.REFERENCES(geocode),
    combination_id: prop.VARCHAR(),
    locomotive_ids: prop.ARRAY_OF(prop.REFERENCES(locomotive)),
    carriage_ids: prop.ARRAY_OF(prop.REFERENCES(carriage)),
    engineer_ids: prop.ARRAY_OF(prop.REFERENCES(trainEngineer)),
    lead_engineer_id: prop.REFERENCES(trainEngineer),
    status: { ...prop.ENUM(['ASSEMBLED', 'DISASSEMBLED']), updatable: true },
  },
  unique: ['combination_id'],
});",
    "relpath": "train.ts",
  },
  GeneratedCodeFile {
    "content": "import { Entity, prop } from 'sql-schema-generator';

/**
 * sql-schema for the domain entity 'Locomotive'
 */
export const locomotive = new Entity({
  name: 'locomotive',
  properties: {
    ein: prop.VARCHAR(),
    fuel: prop.ENUM(['STEAM', 'COAL', 'DIESEL', 'BATTERY', 'FISSION']),
    capacity: prop.NUMERIC(),
    milage: { ...prop.NUMERIC(), updatable: true },
  },
  unique: ['ein'],
});",
    "relpath": "locomotive.ts",
  },
  GeneratedCodeFile {
    "content": "import { Event, prop } from 'sql-schema-generator';

import { geocode } from './geocode';
import { train } from './train';

/**
 * sql-schema for the domain event 'TrainLocatedEvent'
 */
export const trainLocatedEvent = new Event({
  name: 'train_located_event',
  properties: {
    train_id: prop.REFERENCES(train),
    occurred_at: prop.VARCHAR(),
    geocode_id: prop.REFERENCES(geocode),
  },
  unique: ['train_id', 'occurred_at'],
});",
    "relpath": "trainLocatedEvent.ts",
  },
  GeneratedCodeFile {
    "content": "import { Entity, prop } from 'sql-schema-generator';

import { geocode } from './geocode';

/**
 * sql-schema for the domain entity 'TrainStation'
 */
export const trainStation = new Entity({
  name: 'train_station',
  properties: {
    geocode_id: prop.REFERENCES(geocode),
    name: { ...prop.VARCHAR(), updatable: true },
  },
  unique: ['geocode_id'],
});",
    "relpath": "trainStation.ts",
  },
]
`;

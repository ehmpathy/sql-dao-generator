// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`defineDaoUpsertMethodCodeForDomainObject should look correct for a domain event with a static referenced array 1`] = `
"import { HasId } from 'simple-type-guards';

import { DatabaseConnection } from '$PATH_TO_DATABASE_CONNECTION';
import { TrainLocatedEvent } from '$PATH_TO_DOMAIN_OBJECT';
import { log } from '$PATH_TO_LOG_OBJECT';
import { sqlQueryUpsertTrainLocatedEvent } from '$PATH_TO_GENERATED_SQL_QUERY_FUNCTIONS';
import { geocodeDao } from '../geocodeDao';

export const sql = \`
  -- query_name = upsert_train_located_event
  SELECT
    dgv.id, dgv.uuid
  FROM upsert_train_located_event(
    :trainUuid,
    :occurredAt,
    :geocodeIds
  ) as dgv;
\`;

export const upsert = async ({
  dbConnection,
  trainLocatedEvent,
}: {
  dbConnection: DatabaseConnection;
  trainLocatedEvent: TrainLocatedEvent;
}): Promise<HasId<TrainLocatedEvent>> => {
  const results = await sqlQueryUpsertTrainLocatedEvent({
    dbExecute: dbConnection.query,
    logDebug: log.debug,
    input: {
      trainUuid: trainLocatedEvent.trainUuid,
      occurredAt: trainLocatedEvent.occurredAt,
      geocodeIds: await Promise.all(trainLocatedEvent.geocodes.map(async (geocode) => geocode.id ? geocode.id : (await geocodeDao.upsert({ dbConnection, geocode })).id)),
    },
  });
  const { id } = results[0]; // grab the db generated values
  return new TrainLocatedEvent({ ...trainLocatedEvent, id }) as HasId<TrainLocatedEvent>;
};"
`;

exports[`defineDaoUpsertMethodCodeForDomainObject should look correct for domain entity with references, array and solo, implicit and direct 1`] = `
"import { HasId, HasUuid } from 'simple-type-guards';

import { DatabaseConnection } from '$PATH_TO_DATABASE_CONNECTION';
import { Train } from '$PATH_TO_DOMAIN_OBJECT';
import { log } from '$PATH_TO_LOG_OBJECT';
import { sqlQueryUpsertTrain } from '$PATH_TO_GENERATED_SQL_QUERY_FUNCTIONS';
import { geocodeDao } from '../geocodeDao';
import { trainBadgeDao } from '../trainBadgeDao';

export const sql = \`
  -- query_name = upsert_train
  SELECT
    dgv.id, dgv.uuid
  FROM upsert_train(
    :tin,
    :homeStationGeocodeId,
    (SELECT id FROM train_engineer WHERE train_engineer.uuid = :leadEngineerUuid),
    :badgeIds,
    (
      SELECT COALESCE(array_agg(locomotive.id ORDER BY locomotive_ref.array_order_index), array[]::bigint[]) AS array_agg
      FROM locomotive
      JOIN unnest(:locomotiveUuids) WITH ORDINALITY
        AS locomotive_ref (uuid, array_order_index)
        ON locomotive.uuid = locomotive_ref.uuid
    )
  ) as dgv;
\`;

export const upsert = async ({
  dbConnection,
  train,
}: {
  dbConnection: DatabaseConnection;
  train: Train;
}): Promise<HasId<HasUuid<Train>>> => {
  const results = await sqlQueryUpsertTrain({
    dbExecute: dbConnection.query,
    logDebug: log.debug,
    input: {
      tin: train.tin,
      homeStationGeocodeId: train.homeStationGeocode.id ? train.homeStationGeocode.id : (await geocodeDao.upsert({ dbConnection, geocode: train.homeStationGeocode })).id,
      leadEngineerUuid: train.leadEngineerUuid,
      badgeIds: await Promise.all(train.badges.map(async (trainBadge) => trainBadge.id ? trainBadge.id : (await trainBadgeDao.upsert({ dbConnection, trainBadge })).id)),
      locomotiveUuids: train.locomotiveUuids,
    },
  });
  const { id, uuid } = results[0]; // grab the db generated values
  return new Train({ ...train, id, uuid }) as HasId<HasUuid<Train>>;
};"
`;

exports[`defineDaoUpsertMethodCodeForDomainObject should look correct for simple domain entity 1`] = `
"import { HasId, HasUuid } from 'simple-type-guards';

import { DatabaseConnection } from '$PATH_TO_DATABASE_CONNECTION';
import { Carriage } from '$PATH_TO_DOMAIN_OBJECT';
import { log } from '$PATH_TO_LOG_OBJECT';
import { sqlQueryUpsertCarriage } from '$PATH_TO_GENERATED_SQL_QUERY_FUNCTIONS';

export const sql = \`
  -- query_name = upsert_carriage
  SELECT
    dgv.id, dgv.uuid
  FROM upsert_carriage(
    :cin,
    :carries,
    :capacity
  ) as dgv;
\`;

export const upsert = async ({
  dbConnection,
  carriage,
}: {
  dbConnection: DatabaseConnection;
  carriage: Carriage;
}): Promise<HasId<HasUuid<Carriage>>> => {
  const results = await sqlQueryUpsertCarriage({
    dbExecute: dbConnection.query,
    logDebug: log.debug,
    input: {
      cin: carriage.cin,
      carries: carriage.carries,
      capacity: carriage.capacity,
    },
  });
  const { id, uuid } = results[0]; // grab the db generated values
  return new Carriage({ ...carriage, id, uuid }) as HasId<HasUuid<Carriage>>;
};"
`;

exports[`defineDaoUpsertMethodCodeForDomainObject should look correct for simple value object 1`] = `
"import { HasId } from 'simple-type-guards';

import { DatabaseConnection } from '$PATH_TO_DATABASE_CONNECTION';
import { Geocode } from '$PATH_TO_DOMAIN_OBJECT';
import { log } from '$PATH_TO_LOG_OBJECT';
import { sqlQueryUpsertGeocode } from '$PATH_TO_GENERATED_SQL_QUERY_FUNCTIONS';

export const sql = \`
  -- query_name = upsert_geocode
  SELECT
    dgv.id, dgv.uuid
  FROM upsert_geocode(
    :latitude,
    :longitude
  ) as dgv;
\`;

export const upsert = async ({
  dbConnection,
  geocode,
}: {
  dbConnection: DatabaseConnection;
  geocode: Geocode;
}): Promise<HasId<Geocode>> => {
  const results = await sqlQueryUpsertGeocode({
    dbExecute: dbConnection.query,
    logDebug: log.debug,
    input: {
      latitude: geocode.latitude,
      longitude: geocode.longitude,
    },
  });
  const { id } = results[0]; // grab the db generated values
  return new Geocode({ ...geocode, id }) as HasId<Geocode>;
};"
`;

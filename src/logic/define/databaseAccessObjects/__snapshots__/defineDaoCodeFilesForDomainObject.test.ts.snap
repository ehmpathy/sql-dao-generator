// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`defineDaoCodeFilesForDomainObject should have the findByUuid file if property has uuid 1`] = `
[
  GeneratedCodeFile {
    "content": "import { findById } from './findById';
import { findByUnique } from './findByUnique';
import { findByUuid } from './findByUuid';
import { upsert } from './upsert';

export const daoGeocode = {
  findById,
  findByUnique,
  findByUuid,
  upsert,
};",
    "relpath": "daoGeocode/index.ts",
  },
  GeneratedCodeFile {
    "content": "import { HasMetadata } from 'type-fns';

import { Geocode } from '$PATH_TO_DOMAIN_OBJECT';
import { SqlQueryFindGeocodeByIdOutput } from '$PATH_TO_GENERATED_SQL_TYPES';

export const castFromDatabaseObject = (
  dbObject: SqlQueryFindGeocodeByIdOutput,
): HasMetadata<Geocode> =>
  new Geocode({
    id: dbObject.id,
    uuid: dbObject.uuid,
    latitude: dbObject.latitude,
    longitude: dbObject.longitude,
  }) as HasMetadata<Geocode>;",
    "relpath": "daoGeocode/castFromDatabaseObject.ts",
  },
  GeneratedCodeFile {
    "content": "import { HasMetadata } from 'type-fns';

import { DatabaseConnection } from '$PATH_TO_DATABASE_CONNECTION';
import { log } from '$PATH_TO_LOG_OBJECT';
import { Geocode } from '$PATH_TO_DOMAIN_OBJECT';
import { sqlQueryFindGeocodeById } from '$PATH_TO_GENERATED_SQL_QUERY_FUNCTIONS';
import { castFromDatabaseObject } from './castFromDatabaseObject';

export const sql = \`
  -- query_name = find_geocode_by_id
  SELECT
    geocode.id,
    geocode.uuid,
    geocode.latitude,
    geocode.longitude
  FROM geocode
  WHERE geocode.id = :id;
\`;

export const findById = async ({
  dbConnection,
  id,
}: {
  dbConnection: DatabaseConnection;
  id: number;
}): Promise<HasMetadata<Geocode> | null> => {
  const results = await sqlQueryFindGeocodeById({
    dbExecute: dbConnection.query,
    logDebug: log.debug,
    input: {
      id,
    },
  });
  const [dbObject, ...moreDbObjects] = results;
  if (moreDbObjects.length) throw new Error('expected only one db object for this query');
  if (!dbObject) return null;
  return castFromDatabaseObject(dbObject);
};",
    "relpath": "daoGeocode/findById.ts",
  },
  GeneratedCodeFile {
    "content": "import { HasMetadata } from 'type-fns';

import { DatabaseConnection } from '$PATH_TO_DATABASE_CONNECTION';
import { log } from '$PATH_TO_LOG_OBJECT';
import { Geocode } from '$PATH_TO_DOMAIN_OBJECT';
import { sqlQueryFindGeocodeByUnique } from '$PATH_TO_GENERATED_SQL_QUERY_FUNCTIONS';
import { castFromDatabaseObject } from './castFromDatabaseObject';

export const sql = \`
  -- query_name = find_geocode_by_unique
  SELECT
    geocode.id,
    geocode.uuid,
    geocode.latitude,
    geocode.longitude
  FROM geocode
  WHERE 1=1
    AND geocode.latitude = :latitude
    AND geocode.longitude = :longitude;
\`;

export const findByUnique = async ({
  dbConnection,
  latitude,
  longitude,
}: {
  dbConnection: DatabaseConnection;
  latitude: number;
  longitude: number;
}): Promise<HasMetadata<Geocode> | null> => {
  const results = await sqlQueryFindGeocodeByUnique({
    dbExecute: dbConnection.query,
    logDebug: log.debug,
    input: {
      latitude,
      longitude,
    },
  });
  const [dbObject, ...moreDbObjects] = results;
  if (moreDbObjects.length) throw new Error('expected only one db object for this query');
  if (!dbObject) return null;
  return castFromDatabaseObject(dbObject);
};",
    "relpath": "daoGeocode/findByUnique.ts",
  },
  GeneratedCodeFile {
    "content": "import { HasMetadata } from 'type-fns';

import { DatabaseConnection } from '$PATH_TO_DATABASE_CONNECTION';
import { log } from '$PATH_TO_LOG_OBJECT';
import { Geocode } from '$PATH_TO_DOMAIN_OBJECT';
import { sqlQueryFindGeocodeByUuid } from '$PATH_TO_GENERATED_SQL_QUERY_FUNCTIONS';
import { castFromDatabaseObject } from './castFromDatabaseObject';

export const sql = \`
  -- query_name = find_geocode_by_uuid
  SELECT
    geocode.id,
    geocode.uuid,
    geocode.latitude,
    geocode.longitude
  FROM geocode
  WHERE geocode.uuid = :uuid;
\`;

export const findByUuid = async ({
  dbConnection,
  uuid,
}: {
  dbConnection: DatabaseConnection;
  uuid: string;
}): Promise<HasMetadata<Geocode> | null> => {
  const results = await sqlQueryFindGeocodeByUuid({
    dbExecute: dbConnection.query,
    logDebug: log.debug,
    input: {
      uuid,
    },
  });
  const [dbObject, ...moreDbObjects] = results;
  if (moreDbObjects.length) throw new Error('expected only one db object for this query');
  if (!dbObject) return null;
  return castFromDatabaseObject(dbObject);
};",
    "relpath": "daoGeocode/findByUuid.ts",
  },
  GeneratedCodeFile {
    "content": "import { HasMetadata } from 'type-fns';

import { DatabaseConnection } from '$PATH_TO_DATABASE_CONNECTION';
import { Geocode } from '$PATH_TO_DOMAIN_OBJECT';
import { log } from '$PATH_TO_LOG_OBJECT';
import { sqlQueryUpsertGeocode } from '$PATH_TO_GENERATED_SQL_QUERY_FUNCTIONS';

export const sql = \`
  -- query_name = upsert_geocode
  SELECT
    dgv.id, dgv.uuid
  FROM upsert_geocode(
    :latitude,
    :longitude
  ) as dgv;
\`;

export const upsert = async ({
  dbConnection,
  geocode,
}: {
  dbConnection: DatabaseConnection;
  geocode: Geocode;
}): Promise<HasMetadata<Geocode>> => {
  const results = await sqlQueryUpsertGeocode({
    dbExecute: dbConnection.query,
    logDebug: log.debug,
    input: {
      latitude: geocode.latitude,
      longitude: geocode.longitude,
    },
  });
  const { id, uuid } = results[0]!; // grab the db generated values
  return new Geocode({ ...geocode, id, uuid }) as HasMetadata<Geocode>;
};",
    "relpath": "daoGeocode/upsert.ts",
  },
]
`;

exports[`defineDaoCodeFilesForDomainObject should not have the findByUuid file if property has uuid 1`] = `
[
  GeneratedCodeFile {
    "content": "import { findById } from './findById';
import { findByUnique } from './findByUnique';
import { upsert } from './upsert';

export const daoGeocode = {
  findById,
  findByUnique,
  upsert,
};",
    "relpath": "daoGeocode/index.ts",
  },
  GeneratedCodeFile {
    "content": "import { HasMetadata } from 'type-fns';

import { Geocode } from '$PATH_TO_DOMAIN_OBJECT';
import { SqlQueryFindGeocodeByIdOutput } from '$PATH_TO_GENERATED_SQL_TYPES';

export const castFromDatabaseObject = (
  dbObject: SqlQueryFindGeocodeByIdOutput,
): HasMetadata<Geocode> =>
  new Geocode({
    id: dbObject.id,
    latitude: dbObject.latitude,
    longitude: dbObject.longitude,
  }) as HasMetadata<Geocode>;",
    "relpath": "daoGeocode/castFromDatabaseObject.ts",
  },
  GeneratedCodeFile {
    "content": "import { HasMetadata } from 'type-fns';

import { DatabaseConnection } from '$PATH_TO_DATABASE_CONNECTION';
import { log } from '$PATH_TO_LOG_OBJECT';
import { Geocode } from '$PATH_TO_DOMAIN_OBJECT';
import { sqlQueryFindGeocodeById } from '$PATH_TO_GENERATED_SQL_QUERY_FUNCTIONS';
import { castFromDatabaseObject } from './castFromDatabaseObject';

export const sql = \`
  -- query_name = find_geocode_by_id
  SELECT
    geocode.id,
    geocode.latitude,
    geocode.longitude
  FROM geocode
  WHERE geocode.id = :id;
\`;

export const findById = async ({
  dbConnection,
  id,
}: {
  dbConnection: DatabaseConnection;
  id: number;
}): Promise<HasMetadata<Geocode> | null> => {
  const results = await sqlQueryFindGeocodeById({
    dbExecute: dbConnection.query,
    logDebug: log.debug,
    input: {
      id,
    },
  });
  const [dbObject, ...moreDbObjects] = results;
  if (moreDbObjects.length) throw new Error('expected only one db object for this query');
  if (!dbObject) return null;
  return castFromDatabaseObject(dbObject);
};",
    "relpath": "daoGeocode/findById.ts",
  },
  GeneratedCodeFile {
    "content": "import { HasMetadata } from 'type-fns';

import { DatabaseConnection } from '$PATH_TO_DATABASE_CONNECTION';
import { log } from '$PATH_TO_LOG_OBJECT';
import { Geocode } from '$PATH_TO_DOMAIN_OBJECT';
import { sqlQueryFindGeocodeByUnique } from '$PATH_TO_GENERATED_SQL_QUERY_FUNCTIONS';
import { castFromDatabaseObject } from './castFromDatabaseObject';

export const sql = \`
  -- query_name = find_geocode_by_unique
  SELECT
    geocode.id,
    geocode.latitude,
    geocode.longitude
  FROM geocode
  WHERE 1=1
    AND geocode.latitude = :latitude
    AND geocode.longitude = :longitude;
\`;

export const findByUnique = async ({
  dbConnection,
  latitude,
  longitude,
}: {
  dbConnection: DatabaseConnection;
  latitude: number;
  longitude: number;
}): Promise<HasMetadata<Geocode> | null> => {
  const results = await sqlQueryFindGeocodeByUnique({
    dbExecute: dbConnection.query,
    logDebug: log.debug,
    input: {
      latitude,
      longitude,
    },
  });
  const [dbObject, ...moreDbObjects] = results;
  if (moreDbObjects.length) throw new Error('expected only one db object for this query');
  if (!dbObject) return null;
  return castFromDatabaseObject(dbObject);
};",
    "relpath": "daoGeocode/findByUnique.ts",
  },
  GeneratedCodeFile {
    "content": "import { HasMetadata } from 'type-fns';

import { DatabaseConnection } from '$PATH_TO_DATABASE_CONNECTION';
import { Geocode } from '$PATH_TO_DOMAIN_OBJECT';
import { log } from '$PATH_TO_LOG_OBJECT';
import { sqlQueryUpsertGeocode } from '$PATH_TO_GENERATED_SQL_QUERY_FUNCTIONS';

export const sql = \`
  -- query_name = upsert_geocode
  SELECT
    dgv.id
  FROM upsert_geocode(
    :latitude,
    :longitude
  ) as dgv;
\`;

export const upsert = async ({
  dbConnection,
  geocode,
}: {
  dbConnection: DatabaseConnection;
  geocode: Geocode;
}): Promise<HasMetadata<Geocode>> => {
  const results = await sqlQueryUpsertGeocode({
    dbExecute: dbConnection.query,
    logDebug: log.debug,
    input: {
      latitude: geocode.latitude,
      longitude: geocode.longitude,
    },
  });
  const { id } = results[0]!; // grab the db generated values
  return new Geocode({ ...geocode, id }) as HasMetadata<Geocode>;
};",
    "relpath": "daoGeocode/upsert.ts",
  },
]
`;

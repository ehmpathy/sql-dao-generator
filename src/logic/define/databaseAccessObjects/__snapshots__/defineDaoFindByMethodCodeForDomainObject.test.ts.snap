// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`defineDaoFindByMethodCodeForDomainObject findById should look correct for a domain event with a static referenced array 1`] = `
"import { HasMetadata } from 'type-fns';

import { DatabaseConnection } from '$PATH_TO_DATABASE_CONNECTION';
import { log } from '$PATH_TO_LOG_OBJECT';
import { TrainLocatedEvent } from '$PATH_TO_DOMAIN_OBJECT';
import { sqlQueryFindTrainLocatedEventById } from '$PATH_TO_GENERATED_SQL_QUERY_FUNCTIONS';
import { castFromDatabaseObject } from './castFromDatabaseObject';

export const sql = \`
  -- query_name = find_train_located_event_by_id
  SELECT
    train_located_event.id,
    train_located_event.train_uuid,
    train_located_event.occurred_at,
    train_located_event.geocodes
  FROM view_train_located_event_hydrated AS train_located_event
  WHERE train_located_event.id = :id;
\`;

export const findById = async (
  {
    id,
  }: {
    id: number;
  },
  context: { dbConnection: DatabaseConnection },
): Promise<HasMetadata<TrainLocatedEvent> | null> => {
  const results = await sqlQueryFindTrainLocatedEventById({
    dbExecute: context.dbConnection.query,
    logDebug: log.debug,
    input: {
      id,
    },
  });
  const [dbObject, ...moreDbObjects] = results;
  if (moreDbObjects.length) throw new Error('expected only one db object for this query');
  if (!dbObject) return null;
  return castFromDatabaseObject(dbObject);
};"
`;

exports[`defineDaoFindByMethodCodeForDomainObject findById should look correct for domain entity with references, array and solo, implicit and direct 1`] = `
"import { HasMetadata } from 'type-fns';

import { DatabaseConnection } from '$PATH_TO_DATABASE_CONNECTION';
import { log } from '$PATH_TO_LOG_OBJECT';
import { Train } from '$PATH_TO_DOMAIN_OBJECT';
import { sqlQueryFindTrainById } from '$PATH_TO_GENERATED_SQL_QUERY_FUNCTIONS';
import { castFromDatabaseObject } from './castFromDatabaseObject';

export const sql = \`
  -- query_name = find_train_by_id
  SELECT
    train.id,
    train.uuid,
    train.tin,
    train.home_station_geocode,
    train.lead_engineer_uuid,
    train.badges,
    train.locomotive_uuids
  FROM view_train_hydrated AS train
  WHERE train.id = :id;
\`;

export const findById = async (
  {
    id,
  }: {
    id: number;
  },
  context: { dbConnection: DatabaseConnection },
): Promise<HasMetadata<Train> | null> => {
  const results = await sqlQueryFindTrainById({
    dbExecute: context.dbConnection.query,
    logDebug: log.debug,
    input: {
      id,
    },
  });
  const [dbObject, ...moreDbObjects] = results;
  if (moreDbObjects.length) throw new Error('expected only one db object for this query');
  if (!dbObject) return null;
  return castFromDatabaseObject(dbObject);
};"
`;

exports[`defineDaoFindByMethodCodeForDomainObject findById should look correct for simple domain entity 1`] = `
"import { HasMetadata } from 'type-fns';

import { DatabaseConnection } from '$PATH_TO_DATABASE_CONNECTION';
import { log } from '$PATH_TO_LOG_OBJECT';
import { Carriage } from '$PATH_TO_DOMAIN_OBJECT';
import { sqlQueryFindCarriageById } from '$PATH_TO_GENERATED_SQL_QUERY_FUNCTIONS';
import { castFromDatabaseObject } from './castFromDatabaseObject';

export const sql = \`
  -- query_name = find_carriage_by_id
  SELECT
    carriage.id,
    carriage.uuid,
    carriage.cin,
    carriage.carries,
    carriage.capacity
  FROM view_carriage_hydrated AS carriage
  WHERE carriage.id = :id;
\`;

export const findById = async (
  {
    id,
  }: {
    id: number;
  },
  context: { dbConnection: DatabaseConnection },
): Promise<HasMetadata<Carriage> | null> => {
  const results = await sqlQueryFindCarriageById({
    dbExecute: context.dbConnection.query,
    logDebug: log.debug,
    input: {
      id,
    },
  });
  const [dbObject, ...moreDbObjects] = results;
  if (moreDbObjects.length) throw new Error('expected only one db object for this query');
  if (!dbObject) return null;
  return castFromDatabaseObject(dbObject);
};"
`;

exports[`defineDaoFindByMethodCodeForDomainObject findById should look correct for simple literal 1`] = `
"import { HasMetadata } from 'type-fns';

import { DatabaseConnection } from '$PATH_TO_DATABASE_CONNECTION';
import { log } from '$PATH_TO_LOG_OBJECT';
import { Geocode } from '$PATH_TO_DOMAIN_OBJECT';
import { sqlQueryFindGeocodeById } from '$PATH_TO_GENERATED_SQL_QUERY_FUNCTIONS';
import { castFromDatabaseObject } from './castFromDatabaseObject';

export const sql = \`
  -- query_name = find_geocode_by_id
  SELECT
    geocode.id,
    geocode.uuid,
    geocode.latitude,
    geocode.longitude
  FROM view_geocode_hydrated AS geocode
  WHERE geocode.id = :id;
\`;

export const findById = async (
  {
    id,
  }: {
    id: number;
  },
  context: { dbConnection: DatabaseConnection },
): Promise<HasMetadata<Geocode> | null> => {
  const results = await sqlQueryFindGeocodeById({
    dbExecute: context.dbConnection.query,
    logDebug: log.debug,
    input: {
      id,
    },
  });
  const [dbObject, ...moreDbObjects] = results;
  if (moreDbObjects.length) throw new Error('expected only one db object for this query');
  if (!dbObject) return null;
  return castFromDatabaseObject(dbObject);
};"
`;

exports[`defineDaoFindByMethodCodeForDomainObject findByUnique should look correct for a domain event with a static referenced array 1`] = `
"import { HasMetadata } from 'type-fns';

import { DatabaseConnection } from '$PATH_TO_DATABASE_CONNECTION';
import { log } from '$PATH_TO_LOG_OBJECT';
import { TrainLocatedEvent } from '$PATH_TO_DOMAIN_OBJECT';
import { sqlQueryFindTrainLocatedEventByUnique } from '$PATH_TO_GENERATED_SQL_QUERY_FUNCTIONS';
import { castFromDatabaseObject } from './castFromDatabaseObject';

export const sql = \`
  -- query_name = find_train_located_event_by_unique
  SELECT
    train_located_event.id,
    train_located_event.train_uuid,
    train_located_event.occurred_at,
    train_located_event.geocodes
  FROM view_train_located_event_hydrated AS train_located_event
  WHERE 1=1
    AND train_located_event.train_uuid = :trainUuid
    AND train_located_event.occurred_at = :occurredAt;
\`;

export const findByUnique = async (
  {
    trainUuid,
    occurredAt,
  }: {
    trainUuid: string;
    occurredAt: Date;
  },
  context: { dbConnection: DatabaseConnection },
): Promise<HasMetadata<TrainLocatedEvent> | null> => {
  const results = await sqlQueryFindTrainLocatedEventByUnique({
    dbExecute: context.dbConnection.query,
    logDebug: log.debug,
    input: {
      trainUuid,
      occurredAt,
    },
  });
  const [dbObject, ...moreDbObjects] = results;
  if (moreDbObjects.length) throw new Error('expected only one db object for this query');
  if (!dbObject) return null;
  return castFromDatabaseObject(dbObject);
};"
`;

exports[`defineDaoFindByMethodCodeForDomainObject findByUnique should look correct for domain entity that is unique on references, solo and array, implicit and nested 1`] = `
"import { HasMetadata } from 'type-fns';

import { DatabaseConnection } from '$PATH_TO_DATABASE_CONNECTION';
import { log } from '$PATH_TO_LOG_OBJECT';
import { Geocode, Train, TrainBadge } from '$PATH_TO_DOMAIN_OBJECT';
import { sqlQueryFindTrainByUnique } from '$PATH_TO_GENERATED_SQL_QUERY_FUNCTIONS';
import { castFromDatabaseObject } from './castFromDatabaseObject';
import { geocodeDao } from '../geocodeDao';
import { trainBadgeDao } from '../trainBadgeDao';

export const sql = \`
  -- query_name = find_train_by_unique
  SELECT
    train.id,
    train.uuid,
    train.tin,
    train.home_station_geocode,
    train.lead_engineer_uuid,
    train.badges,
    train.locomotive_uuids
  FROM view_train_hydrated AS train
  JOIN view_train_current ON train.id = view_train_current.id
  WHERE 1=1
    AND view_train_current.home_station_geocode_id = :homeStationGeocodeId
    AND view_train_current.badge_ids = :badgeIds
    AND view_train_current.locomotive_ids = (
      SELECT COALESCE(array_agg(locomotive.id ORDER BY locomotive_ref.array_order_index), array[]::bigint[]) AS array_agg
      FROM locomotive
      JOIN unnest(:locomotiveUuids::uuid[]) WITH ORDINALITY
        AS locomotive_ref (uuid, array_order_index)
        ON locomotive.uuid = locomotive_ref.uuid
    )
    AND view_train_current.lead_engineer_id = (SELECT id FROM train_engineer WHERE train_engineer.uuid = :leadEngineerUuid);
\`;

export const findByUnique = async (
  {
    homeStationGeocode,
    badges,
    locomotiveUuids,
    leadEngineerUuid,
  }: {
    homeStationGeocode: Geocode;
    badges: TrainBadge[];
    locomotiveUuids: string[];
    leadEngineerUuid: string;
  },
  context: { dbConnection: DatabaseConnection },
): Promise<HasMetadata<Train> | null> => {
  const results = await sqlQueryFindTrainByUnique({
    dbExecute: context.dbConnection.query,
    logDebug: log.debug,
    input: {
      homeStationGeocodeId: homeStationGeocode.id ? homeStationGeocode.id : ((await geocodeDao.findByUnique(homeStationGeocode, context))?.id ?? -1),
      badgeIds: await Promise.all(badges.map(async (trainBadge) => trainBadge.id ? trainBadge.id : ((await trainBadgeDao.findByUnique(trainBadge, context))?.id ?? -1) )),
      locomotiveUuids,
      leadEngineerUuid,
    },
  });
  const [dbObject, ...moreDbObjects] = results;
  if (moreDbObjects.length) throw new Error('expected only one db object for this query');
  if (!dbObject) return null;
  return castFromDatabaseObject(dbObject);
};"
`;

exports[`defineDaoFindByMethodCodeForDomainObject findByUnique should look correct for domain entity with references, array and solo, implicit and direct 1`] = `
"import { HasMetadata } from 'type-fns';

import { DatabaseConnection } from '$PATH_TO_DATABASE_CONNECTION';
import { log } from '$PATH_TO_LOG_OBJECT';
import { Train } from '$PATH_TO_DOMAIN_OBJECT';
import { sqlQueryFindTrainByUnique } from '$PATH_TO_GENERATED_SQL_QUERY_FUNCTIONS';
import { castFromDatabaseObject } from './castFromDatabaseObject';

export const sql = \`
  -- query_name = find_train_by_unique
  SELECT
    train.id,
    train.uuid,
    train.tin,
    train.home_station_geocode,
    train.lead_engineer_uuid,
    train.badges,
    train.locomotive_uuids
  FROM view_train_hydrated AS train
  WHERE 1=1
    AND train.tin = :tin;
\`;

export const findByUnique = async (
  {
    tin,
  }: {
    tin: string;
  },
  context: { dbConnection: DatabaseConnection },
): Promise<HasMetadata<Train> | null> => {
  const results = await sqlQueryFindTrainByUnique({
    dbExecute: context.dbConnection.query,
    logDebug: log.debug,
    input: {
      tin,
    },
  });
  const [dbObject, ...moreDbObjects] = results;
  if (moreDbObjects.length) throw new Error('expected only one db object for this query');
  if (!dbObject) return null;
  return castFromDatabaseObject(dbObject);
};"
`;

exports[`defineDaoFindByMethodCodeForDomainObject findByUnique should look correct for simple domain entity 1`] = `
"import { HasMetadata } from 'type-fns';

import { DatabaseConnection } from '$PATH_TO_DATABASE_CONNECTION';
import { log } from '$PATH_TO_LOG_OBJECT';
import { Carriage } from '$PATH_TO_DOMAIN_OBJECT';
import { sqlQueryFindCarriageByUnique } from '$PATH_TO_GENERATED_SQL_QUERY_FUNCTIONS';
import { castFromDatabaseObject } from './castFromDatabaseObject';

export const sql = \`
  -- query_name = find_carriage_by_unique
  SELECT
    carriage.id,
    carriage.uuid,
    carriage.cin,
    carriage.carries,
    carriage.capacity
  FROM view_carriage_hydrated AS carriage
  WHERE 1=1
    AND carriage.cin = :cin;
\`;

export const findByUnique = async (
  {
    cin,
  }: {
    cin: string;
  },
  context: { dbConnection: DatabaseConnection },
): Promise<HasMetadata<Carriage> | null> => {
  const results = await sqlQueryFindCarriageByUnique({
    dbExecute: context.dbConnection.query,
    logDebug: log.debug,
    input: {
      cin,
    },
  });
  const [dbObject, ...moreDbObjects] = results;
  if (moreDbObjects.length) throw new Error('expected only one db object for this query');
  if (!dbObject) return null;
  return castFromDatabaseObject(dbObject);
};"
`;

exports[`defineDaoFindByMethodCodeForDomainObject findByUnique should look correct for simple domain entity unique only on uuid 1`] = `
"import { HasMetadata } from 'type-fns';

import { DatabaseConnection } from '$PATH_TO_DATABASE_CONNECTION';
import { log } from '$PATH_TO_LOG_OBJECT';
import { Carriage } from '$PATH_TO_DOMAIN_OBJECT';
import { sqlQueryFindCarriageByUnique } from '$PATH_TO_GENERATED_SQL_QUERY_FUNCTIONS';
import { castFromDatabaseObject } from './castFromDatabaseObject';

export const sql = \`
  -- query_name = find_carriage_by_unique
  SELECT
    carriage.id,
    carriage.uuid,
    carriage.carries,
    carriage.capacity
  FROM view_carriage_hydrated AS carriage
  WHERE 1=1
    AND carriage.uuid = :uuid;
\`;

export const findByUnique = async (
  {
    uuid,
  }: {
    uuid: string;
  },
  context: { dbConnection: DatabaseConnection },
): Promise<HasMetadata<Carriage> | null> => {
  const results = await sqlQueryFindCarriageByUnique({
    dbExecute: context.dbConnection.query,
    logDebug: log.debug,
    input: {
      uuid,
    },
  });
  const [dbObject, ...moreDbObjects] = results;
  if (moreDbObjects.length) throw new Error('expected only one db object for this query');
  if (!dbObject) return null;
  return castFromDatabaseObject(dbObject);
};"
`;

exports[`defineDaoFindByMethodCodeForDomainObject findByUnique should look correct for simple literal 1`] = `
"import { HasMetadata } from 'type-fns';

import { DatabaseConnection } from '$PATH_TO_DATABASE_CONNECTION';
import { log } from '$PATH_TO_LOG_OBJECT';
import { Geocode } from '$PATH_TO_DOMAIN_OBJECT';
import { sqlQueryFindGeocodeByUnique } from '$PATH_TO_GENERATED_SQL_QUERY_FUNCTIONS';
import { castFromDatabaseObject } from './castFromDatabaseObject';

export const sql = \`
  -- query_name = find_geocode_by_unique
  SELECT
    geocode.id,
    geocode.latitude,
    geocode.longitude
  FROM view_geocode_hydrated AS geocode
  WHERE 1=1
    AND geocode.latitude = :latitude
    AND geocode.longitude = :longitude;
\`;

export const findByUnique = async (
  {
    latitude,
    longitude,
  }: {
    latitude: number;
    longitude: number;
  },
  context: { dbConnection: DatabaseConnection },
): Promise<HasMetadata<Geocode> | null> => {
  const results = await sqlQueryFindGeocodeByUnique({
    dbExecute: context.dbConnection.query,
    logDebug: log.debug,
    input: {
      latitude,
      longitude,
    },
  });
  const [dbObject, ...moreDbObjects] = results;
  if (moreDbObjects.length) throw new Error('expected only one db object for this query');
  if (!dbObject) return null;
  return castFromDatabaseObject(dbObject);
};"
`;

exports[`defineDaoFindByMethodCodeForDomainObject findByUnique should look correct for simple literal that references another literal 1`] = `
"import { HasMetadata } from 'type-fns';

import { DatabaseConnection } from '$PATH_TO_DATABASE_CONNECTION';
import { log } from '$PATH_TO_LOG_OBJECT';
import { InvoiceLineItem, Price } from '$PATH_TO_DOMAIN_OBJECT';
import { sqlQueryFindInvoiceLineItemByUnique } from '$PATH_TO_GENERATED_SQL_QUERY_FUNCTIONS';
import { castFromDatabaseObject } from './castFromDatabaseObject';
import { priceDao } from '../priceDao';

export const sql = \`
  -- query_name = find_invoice_line_item_by_unique
  SELECT
    invoice_line_item.id,
    invoice_line_item.uuid,
    invoice_line_item.price
  FROM view_invoice_line_item_hydrated AS invoice_line_item
  JOIN invoice_line_item as view_invoice_line_item_current ON invoice_line_item.id = view_invoice_line_item_current.id
  WHERE 1=1
    AND view_invoice_line_item_current.price_id = :priceId;
\`;

export const findByUnique = async (
  {
    price,
  }: {
    price: Price;
  },
  context: { dbConnection: DatabaseConnection },
): Promise<HasMetadata<InvoiceLineItem> | null> => {
  const results = await sqlQueryFindInvoiceLineItemByUnique({
    dbExecute: context.dbConnection.query,
    logDebug: log.debug,
    input: {
      priceId: price.id ? price.id : ((await priceDao.findByUnique(price, context))?.id ?? -1),
    },
  });
  const [dbObject, ...moreDbObjects] = results;
  if (moreDbObjects.length) throw new Error('expected only one db object for this query');
  if (!dbObject) return null;
  return castFromDatabaseObject(dbObject);
};"
`;

exports[`defineDaoFindByMethodCodeForDomainObject findByUnique should look for a domain entity unique on a nested domain object 1`] = `
"import { HasMetadata } from 'type-fns';

import { DatabaseConnection } from '$PATH_TO_DATABASE_CONNECTION';
import { log } from '$PATH_TO_LOG_OBJECT';
import { Geocode, Station } from '$PATH_TO_DOMAIN_OBJECT';
import { sqlQueryFindStationByUnique } from '$PATH_TO_GENERATED_SQL_QUERY_FUNCTIONS';
import { castFromDatabaseObject } from './castFromDatabaseObject';
import { geocodeDao } from '../geocodeDao';

export const sql = \`
  -- query_name = find_station_by_unique
  SELECT
    station.id,
    station.uuid,
    station.geocode,
    station.name
  FROM view_station_hydrated AS station
  JOIN view_station_current ON station.id = view_station_current.id
  WHERE 1=1
    AND view_station_current.geocode_id = :geocodeId;
\`;

export const findByUnique = async (
  {
    geocode,
  }: {
    geocode: Geocode;
  },
  context: { dbConnection: DatabaseConnection },
): Promise<HasMetadata<Station> | null> => {
  const results = await sqlQueryFindStationByUnique({
    dbExecute: context.dbConnection.query,
    logDebug: log.debug,
    input: {
      geocodeId: geocode.id ? geocode.id : ((await geocodeDao.findByUnique(geocode, context))?.id ?? -1),
    },
  });
  const [dbObject, ...moreDbObjects] = results;
  if (moreDbObjects.length) throw new Error('expected only one db object for this query');
  if (!dbObject) return null;
  return castFromDatabaseObject(dbObject);
};"
`;

exports[`defineDaoFindByMethodCodeForDomainObject findByUuid should look correct for a domain event with a static referenced array 1`] = `
"import { HasMetadata } from 'type-fns';

import { DatabaseConnection } from '$PATH_TO_DATABASE_CONNECTION';
import { log } from '$PATH_TO_LOG_OBJECT';
import { TrainLocatedEvent } from '$PATH_TO_DOMAIN_OBJECT';
import { sqlQueryFindTrainLocatedEventByUuid } from '$PATH_TO_GENERATED_SQL_QUERY_FUNCTIONS';
import { castFromDatabaseObject } from './castFromDatabaseObject';

export const sql = \`
  -- query_name = find_train_located_event_by_uuid
  SELECT
    train_located_event.id,
    train_located_event.train_uuid,
    train_located_event.occurred_at,
    train_located_event.geocodes
  FROM view_train_located_event_hydrated AS train_located_event
  WHERE train_located_event.uuid = :uuid;
\`;

export const findByUuid = async (
  {
    uuid,
  }: {
    uuid: string;
  },
  context: { dbConnection: DatabaseConnection },
): Promise<HasMetadata<TrainLocatedEvent> | null> => {
  const results = await sqlQueryFindTrainLocatedEventByUuid({
    dbExecute: context.dbConnection.query,
    logDebug: log.debug,
    input: {
      uuid,
    },
  });
  const [dbObject, ...moreDbObjects] = results;
  if (moreDbObjects.length) throw new Error('expected only one db object for this query');
  if (!dbObject) return null;
  return castFromDatabaseObject(dbObject);
};"
`;

exports[`defineDaoFindByMethodCodeForDomainObject findByUuid should look correct for domain entity with references, array and solo, implicit and direct 1`] = `
"import { HasMetadata } from 'type-fns';

import { DatabaseConnection } from '$PATH_TO_DATABASE_CONNECTION';
import { log } from '$PATH_TO_LOG_OBJECT';
import { Train } from '$PATH_TO_DOMAIN_OBJECT';
import { sqlQueryFindTrainByUuid } from '$PATH_TO_GENERATED_SQL_QUERY_FUNCTIONS';
import { castFromDatabaseObject } from './castFromDatabaseObject';

export const sql = \`
  -- query_name = find_train_by_uuid
  SELECT
    train.id,
    train.uuid,
    train.tin,
    train.home_station_geocode,
    train.lead_engineer_uuid,
    train.badges,
    train.locomotive_uuids
  FROM view_train_hydrated AS train
  WHERE train.uuid = :uuid;
\`;

export const findByUuid = async (
  {
    uuid,
  }: {
    uuid: string;
  },
  context: { dbConnection: DatabaseConnection },
): Promise<HasMetadata<Train> | null> => {
  const results = await sqlQueryFindTrainByUuid({
    dbExecute: context.dbConnection.query,
    logDebug: log.debug,
    input: {
      uuid,
    },
  });
  const [dbObject, ...moreDbObjects] = results;
  if (moreDbObjects.length) throw new Error('expected only one db object for this query');
  if (!dbObject) return null;
  return castFromDatabaseObject(dbObject);
};"
`;

exports[`defineDaoFindByMethodCodeForDomainObject findByUuid should look correct for simple domain entity 1`] = `
"import { HasMetadata } from 'type-fns';

import { DatabaseConnection } from '$PATH_TO_DATABASE_CONNECTION';
import { log } from '$PATH_TO_LOG_OBJECT';
import { Carriage } from '$PATH_TO_DOMAIN_OBJECT';
import { sqlQueryFindCarriageByUuid } from '$PATH_TO_GENERATED_SQL_QUERY_FUNCTIONS';
import { castFromDatabaseObject } from './castFromDatabaseObject';

export const sql = \`
  -- query_name = find_carriage_by_uuid
  SELECT
    carriage.id,
    carriage.uuid,
    carriage.cin,
    carriage.carries,
    carriage.capacity
  FROM view_carriage_hydrated AS carriage
  WHERE carriage.uuid = :uuid;
\`;

export const findByUuid = async (
  {
    uuid,
  }: {
    uuid: string;
  },
  context: { dbConnection: DatabaseConnection },
): Promise<HasMetadata<Carriage> | null> => {
  const results = await sqlQueryFindCarriageByUuid({
    dbExecute: context.dbConnection.query,
    logDebug: log.debug,
    input: {
      uuid,
    },
  });
  const [dbObject, ...moreDbObjects] = results;
  if (moreDbObjects.length) throw new Error('expected only one db object for this query');
  if (!dbObject) return null;
  return castFromDatabaseObject(dbObject);
};"
`;

exports[`defineDaoFindByMethodCodeForDomainObject findByUuid should look correct for simple literal 1`] = `
"import { HasMetadata } from 'type-fns';

import { DatabaseConnection } from '$PATH_TO_DATABASE_CONNECTION';
import { log } from '$PATH_TO_LOG_OBJECT';
import { Geocode } from '$PATH_TO_DOMAIN_OBJECT';
import { sqlQueryFindGeocodeByUuid } from '$PATH_TO_GENERATED_SQL_QUERY_FUNCTIONS';
import { castFromDatabaseObject } from './castFromDatabaseObject';

export const sql = \`
  -- query_name = find_geocode_by_uuid
  SELECT
    geocode.id,
    geocode.latitude,
    geocode.longitude
  FROM view_geocode_hydrated AS geocode
  WHERE geocode.uuid = :uuid;
\`;

export const findByUuid = async (
  {
    uuid,
  }: {
    uuid: string;
  },
  context: { dbConnection: DatabaseConnection },
): Promise<HasMetadata<Geocode> | null> => {
  const results = await sqlQueryFindGeocodeByUuid({
    dbExecute: context.dbConnection.query,
    logDebug: log.debug,
    input: {
      uuid,
    },
  });
  const [dbObject, ...moreDbObjects] = results;
  if (moreDbObjects.length) throw new Error('expected only one db object for this query');
  if (!dbObject) return null;
  return castFromDatabaseObject(dbObject);
};"
`;

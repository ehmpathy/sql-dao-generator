// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`defineDaoUtilCastMethodCodeForDomainObject should look correct for a domain event with a static referenced array 1`] = `
"import { HasId } from 'simple-type-guards';

import { TrainLocatedEvent } from '$PATH_TO_DOMAIN_OBJECT';
import { SqlQueryFindGeocodeByIdOutput, SqlQueryFindTrainLocatedEventByIdOutput } from '$PATH_TO_GENERATED_SQL_TYPES';
import { castFromDatabaseObject as castGeocodeFromDatabaseObject } from '../geocodeDao/castFromDatabaseObject';

export const castFromDatabaseObject = (
  dbObject: SqlQueryFindTrainLocatedEventByIdOutput,
): HasId<TrainLocatedEvent> =>
  new TrainLocatedEvent({
    id: dbObject.id,
    trainUuid: dbObject.train_uuid,
    occurredAt: dbObject.occurred_at,
    geocodes: (dbObject.geocodes as SqlQueryFindGeocodeByIdOutput[]).map(castGeocodeFromDatabaseObject),
  }) as HasId<TrainLocatedEvent>;"
`;

exports[`defineDaoUtilCastMethodCodeForDomainObject should look correct for domain entity with references, array and solo, implicit and direct 1`] = `
"import { HasId, HasUuid } from 'simple-type-guards';

import { Train } from '$PATH_TO_DOMAIN_OBJECT';
import { SqlQueryFindGeocodeByIdOutput, SqlQueryFindTrainBadgeByIdOutput, SqlQueryFindTrainByIdOutput } from '$PATH_TO_GENERATED_SQL_TYPES';
import { castFromDatabaseObject as castGeocodeFromDatabaseObject } from '../geocodeDao/castFromDatabaseObject';
import { castFromDatabaseObject as castTrainBadgeFromDatabaseObject } from '../trainBadgeDao/castFromDatabaseObject';

export const castFromDatabaseObject = (
  dbObject: SqlQueryFindTrainByIdOutput,
): HasId<HasUuid<Train>> =>
  new Train({
    id: dbObject.id,
    uuid: dbObject.uuid,
    tin: dbObject.tin,
    homeStationGeocode: castGeocodeFromDatabaseObject(dbObject.home_station_geocode as SqlQueryFindGeocodeByIdOutput),
    leadEngineerUuid: dbObject.lead_engineer_uuid,
    badges: (dbObject.badges as SqlQueryFindTrainBadgeByIdOutput[]).map(castTrainBadgeFromDatabaseObject),
    locomotiveUuids: dbObject.locomotive_uuids as string[],
  }) as HasId<HasUuid<Train>>;"
`;

exports[`defineDaoUtilCastMethodCodeForDomainObject should look correct for simple domain entity 1`] = `
"import { HasId, HasUuid } from 'simple-type-guards';

import { Carriage } from '$PATH_TO_DOMAIN_OBJECT';
import { SqlQueryFindCarriageByIdOutput } from '$PATH_TO_GENERATED_SQL_TYPES';

export const castFromDatabaseObject = (
  dbObject: SqlQueryFindCarriageByIdOutput,
): HasId<HasUuid<Carriage>> =>
  new Carriage({
    id: dbObject.id,
    uuid: dbObject.uuid,
    cin: dbObject.cin,
    carries: dbObject.carries as Carriage['carries'],
    capacity: dbObject.capacity,
  }) as HasId<HasUuid<Carriage>>;"
`;

exports[`defineDaoUtilCastMethodCodeForDomainObject should look correct for simple value object 1`] = `
"import { HasId } from 'simple-type-guards';

import { Geocode } from '$PATH_TO_DOMAIN_OBJECT';
import { SqlQueryFindGeocodeByIdOutput } from '$PATH_TO_GENERATED_SQL_TYPES';

export const castFromDatabaseObject = (
  dbObject: SqlQueryFindGeocodeByIdOutput,
): HasId<Geocode> =>
  new Geocode({
    id: dbObject.id,
    latitude: dbObject.latitude,
    longitude: dbObject.longitude,
  }) as HasId<Geocode>;"
`;

import { DomainObjectMetadata } from 'domain-objects-metadata';
import { isPresent } from 'type-fns';

import { SqlSchemaPropertyMetadata } from '../../../domain/objects/SqlSchemaPropertyMetadata';

export const defineDatabaseGeneratedSqlSchemaPropertiesForDomainObject = ({
  domainObject,
}: {
  domainObject: DomainObjectMetadata;
}) => {
  const isUniqueOnUuid = domainObject.decorations.unique?.includes('uuid');
  const hasUpdatableProperties =
    (domainObject.decorations.updatable?.length ?? 0) > 0;

  // define which sql schema properties are generated by the db
  return [
    new SqlSchemaPropertyMetadata({
      name: 'id',
      isDatabaseGenerated: true,
      isArray: false,
      isNullable: false,
      isUpdatable: false,
      reference: null,
    }),
    !isUniqueOnUuid
      ? new SqlSchemaPropertyMetadata({
          name: 'uuid',
          isDatabaseGenerated: true,
          isArray: false,
          isNullable: false,
          isUpdatable: false,
          reference: null,
        })
      : null, // "uuid" is only autogenerated if the domain object is not unique on it
    new SqlSchemaPropertyMetadata({
      name: 'created_at',
      isDatabaseGenerated: true,
      isArray: false,
      isNullable: false,
      isUpdatable: false,
      reference: null,
    }),
    hasUpdatableProperties
      ? new SqlSchemaPropertyMetadata({
          name: 'effective_at',
          isDatabaseGenerated: true,
          isArray: false,
          isNullable: false,
          isUpdatable: false,
          reference: null,
        })
      : null, // domain objects only have "effective_at" defined if they're updatable
    hasUpdatableProperties
      ? new SqlSchemaPropertyMetadata({
          name: 'updated_at',
          isDatabaseGenerated: true,
          isArray: false,
          isNullable: false,
          isUpdatable: false,
          reference: null,
        })
      : null, // domain objects only have "updated_at" defined if they're updatable
  ].filter(isPresent);
};
